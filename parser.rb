#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require 'lexer'
  require 'nodes'

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 29)

  def parse(code, show_tokens = false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     1,     2,     1,     2,     6,     8 ]

racc_action_check = [
     0,     0,     4,     4,     3,     6 ]

racc_action_pointer = [
    -2,   nil,   nil,     4,     0,   nil,     5,   nil,   nil ]

racc_action_default = [
    -1,    -5,    -6,    -7,    -2,    -3,    -7,    -4,     9 ]

racc_goto_table = [
     5,     4,     3,   nil,     7 ]

racc_goto_check = [
     3,     2,     1,   nil,     3 ]

racc_goto_pointer = [
   nil,     2,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 5, :_reduce_1,
  1, 5, :_reduce_2,
  1, 6, :_reduce_3,
  2, 6, :_reduce_4,
  1, 7, :_reduce_5,
  1, 7, :_reduce_6 ]

racc_reduce_n = 7

racc_shift_n = 9

racc_token_table = {
  false => 0,
  :error => 1,
  :WALK => 2,
  :TURN => 3 }

racc_nt_base = 4

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "WALK",
  "TURN",
  "$start",
  "Root",
  "Moves",
  "Move" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 7)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 8)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 12)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 13)
  def _reduce_4(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 17)
  def _reduce_5(val, _values, result)
     result = WalkNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_6(val, _values, result)
     result = TurnNode.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
